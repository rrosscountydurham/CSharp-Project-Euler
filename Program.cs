using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using Microsoft.VisualBasic;
using System.Threading.Tasks;

namespace ProjectEuler
{
    abstract public class Problems{
        abstract public void Solve();
    }
    public class Problem1 : Problems
    {
        public override void Solve() {
            //Find sum of all multiples of 3 or 5 below 1000
            int total = 0;
            for(int i = 0; i < 1000; i++)
            {
                if(i % 3 == 0 || i % 5 == 0)
                {
                    total += i;
                }
            }
            Console.WriteLine("Sum of multiples of 3 and 5 below 1000; {0:###,###}",total);
        }
    }

    public class Problem2 : Problems
    {
        /*Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

          1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

        By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.*/
        public override void Solve()
        {
            int lastVal = 1; int currVal = 1; int tempVal = 0; int total = 0;
            while(currVal < 4000000)
            {
                if (currVal % 2 == 0)
                    total += currVal;
                tempVal = currVal;
                currVal += lastVal;
                lastVal = tempVal;
            }
            Console.WriteLine("Total Fibonacci of even numbers below 4 mill: {0:###,###}", total);
        }
    }

    public class Problem3 : Problems
    {
        /*
         * The prime factors of 13195 are 5, 7, 13 and 29.

            What is the largest prime factor of the number 600851475143 ?
         */
        public override void Solve()
        {
            List<int> ValsToCheck = new List<int>();
            long initialVal = 600851475143;
            long LargestPrimeFactor = 0;
            for(int i = 1; i < (int)Math.Sqrt(initialVal); i++)
            {
                if (IsPrime(i))
                    ValsToCheck.Add(i);
            }
            while(initialVal > 2)
            {
                foreach(int i in ValsToCheck)
                {
                    if(initialVal % i == 0)
                    {
                        initialVal /= i;
                        if (i > LargestPrimeFactor)
                            LargestPrimeFactor = i;
                    }
                }
            }
            Console.WriteLine("Largest prime factor of 600851475143 is " + LargestPrimeFactor);
        }

        public static bool IsPrime(int valIn)
        {
            if (valIn == 1)
                return false;
            if (valIn == 2 || valIn == 3)
                return true;
            if (valIn % 2 == 0 || valIn % 3 == 0)
                return false;
            for(int i = 5; (i * i) < valIn; i+=2)
            {
                if (valIn % i == 0 || valIn % (i + 2) == 0)
                    return false; 
            }

            return true;
        }
    }

    public class Problem4 : Problems
    {
        /*
         * A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.

        Find the largest palindrome made from the product of two 3-digit numbers.*/
        public override void Solve()
        {
            int currVal = 0;
            int maxVal = 0;
            for(int i = 999; i > 0; i--)
            {
                for(int j = i; j > 0; j--)
                { 
                    currVal = i * j;
                    if (currVal > maxVal)
                    {
                        if (IsPalindrome(currVal.ToString()))
                        {
                            if (currVal > maxVal)
                                maxVal = currVal;
                        }
                    }
                }
            }
            Console.WriteLine("Highest palindrome value for three digit pairs is {0:###,###}", maxVal);
        }

        public bool IsPalindrome(string inputStr)
        {
            int halfLength = inputStr.Length / 2;
            string firstHalfStr = inputStr.Substring(0, halfLength);
            string secondHalfStr = inputStr.Substring(inputStr.Length - halfLength, halfLength);
            secondHalfStr = new string(secondHalfStr.ToCharArray().Reverse().ToArray());
            if (firstHalfStr == secondHalfStr)
                return true;
            return false;
        }
    }

    /*
     2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.

    What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
     */
    public class Problem5 : Problems
    {
        public override void Solve()
        {
            int total = 1;
            List<int> returnedPrimes = Problem10.PrimeList(20);
            for(int i = 0; i < returnedPrimes.Count; i++)
            {
                int a = (int)Math.Floor(Math.Log(20) / Math.Log(returnedPrimes[i]));
                total = total * ((int)Math.Pow(returnedPrimes[i], a));
            }
            Console.WriteLine("Lowest number evenly divisible between 1 and 20 is {0:###,###}", total);
        }

        public static List<int> PrimeFactors(int input)
        {
            List<int> returnList = new List<int>();

            if(input == 1)
            {
                returnList.Add(1);
                return returnList;
            }

            if (Problem3.IsPrime(input))
                returnList.Add(input);
            else
            {
                while (!Problem3.IsPrime(input))
                {
                    int div = 2;
                    while(input % div != 0)
                    {
                        div++;
                    }
                    returnList.Add(div);
                    input /= div;
                }
                if (Problem3.IsPrime(input))
                    returnList.Add(input);
            }
            
            return returnList;
        }
    }

    public class Problem6: Problems
    {
        /*The sum of the squares of the first ten natural numbers is,

        12 + 22 + ... + 102 = 385
        The square of the sum of the first ten natural numbers is,

        (1 + 2 + ... + 10)2 = 552 = 3025
        Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is 3025 − 385 = 2640.

        Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.*/

        public override void Solve()
        {
            double upperLimit = 100;
            double sumSquare = Math.Round(Math.Pow(upperLimit, 3) / 3 + Math.Pow(upperLimit, 2) / 2 + upperLimit / 6);
            double squareSum = Math.Round(Math.Pow((upperLimit * (upperLimit + 1)) / 2,2));
            Console.WriteLine("Rounded diff between sum of squares vs square of sums for first one hundred numbers is {0:###,###}",squareSum - sumSquare);
        }
    }

    public class Problem7: Problems
    {
        public override void Solve()
        {
            /*By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.

            What is the 10 001st prime number?*/

            int pCount = 1;
            int val = 1;
            while(pCount <= 10001)
            {
                val += 2;
                if (Problem3.IsPrime(val))
                {
                    pCount++; 
                }
            }
            Console.WriteLine("10001th Prime is {0:###,###}", val);
        }
    }

    public class Problem8: Problems
    {
        /*The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.

        73167176531330624919225119674426574742355349194934
        96983520312774506326239578318016984801869478851843
        85861560789112949495459501737958331952853208805511
        12540698747158523863050715693290963295227443043557
        66896648950445244523161731856403098711121722383113
        62229893423380308135336276614282806444486645238749
        30358907296290491560440772390713810515859307960866
        70172427121883998797908792274921901699720888093776
        65727333001053367881220235421809751254540594752243
        52584907711670556013604839586446706324415722155397
        53697817977846174064955149290862569321978468622482
        83972241375657056057490261407972968652414535100474
        82166370484403199890008895243450658541227588666881
        16427171479924442928230863465674813919123162824586
        17866458359124566529476545682848912883142607690042
        24219022671055626321111109370544217506941658960408
        07198403850962455444362981230987879927244284909188
        84580156166097919133875499200524063689912560717606
        05886116467109405077541002256983155200055935729725
        71636269561882670428252483600823257530420752963450

        Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?*/

        public override void Solve() {
            StringBuilder b = new StringBuilder();
            b.Append("73167176531330624919225119674426574742355349194934");
            b.Append("96983520312774506326239578318016984801869478851843");
            b.Append("85861560789112949495459501737958331952853208805511");
            b.Append("12540698747158523863050715693290963295227443043557");
            b.Append("66896648950445244523161731856403098711121722383113");
            b.Append("62229893423380308135336276614282806444486645238749");
            b.Append("30358907296290491560440772390713810515859307960866");
            b.Append("70172427121883998797908792274921901699720888093776");
            b.Append("65727333001053367881220235421809751254540594752243");
            b.Append("52584907711670556013604839586446706324415722155397");
            b.Append("53697817977846174064955149290862569321978468622482");
            b.Append("83972241375657056057490261407972968652414535100474");
            b.Append("82166370484403199890008895243450658541227588666881");
            b.Append("16427171479924442928230863465674813919123162824586");
            b.Append("17866458359124566529476545682848912883142607690042");
            b.Append("24219022671055626321111109370544217506941658960408");
            b.Append("07198403850962455444362981230987879927244284909188");
            b.Append("84580156166097919133875499200524063689912560717606");
            b.Append("05886116467109405077541002256983155200055935729725");
            b.Append("71636269561882670428252483600823257530420752963450");
            string val = b.ToString();
            int productLen = 13;
            ulong maxVal = 0;
            ulong currVal = 0;
            for(int i = 0; i < b.Length - productLen; i++)
            {
                currVal = stringTotal(substrVal(val, i, productLen));
                if (currVal > maxVal)
                    maxVal = currVal;
            }
            Console.WriteLine("Highest product value of 1000-digit number is {0:###,###}",maxVal);
        }

        public static string substrVal(string strIn, int indexStart, int length) {
            return strIn.Substring(indexStart, length);
        }

        public static ulong stringTotal(string strIn)
        {
            ulong totalReturn = 1;
            foreach(char c in strIn) {
                totalReturn *= ulong.Parse(c.ToString());
            }

            return totalReturn;
        }
    }

    /*A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,

    a * a + b * b = c * c
    For example, (3 * 3) + (4 * 4) = 9 + 16 = 25 = (5 * 5).

    There exists exactly one Pythagorean triplet for which a + b + c = 1000.
    Find the product abc.*/
    public class Problem9: Problems
    {
        public override void Solve()
        {
            int a = 100;
            int b = 101;
            int result = 0;

            while(result != 1000)
            {
                if (result > 1000)
                {
                    a++;
                    b = a + 1;
                }
                else
                {
                    b++;
                }
                result = tripletSum(a, b);
            }

            Console.WriteLine("The product of the triplet that adds up to 1000 is {0:###,###}",tripletProduct(a,b));
        }

        public static int tripletSum(int a, int b)
        {
            double c = Math.Pow(a, 2) + Math.Pow(b, 2);
            c = Math.Sqrt(c);
            if (Math.Floor(c) != c)
                return -1;
            else
                return a + b + (int)c;
        }

        public static int tripletProduct(int a, int b)
        {
            double c = Math.Pow(a, 2) + Math.Pow(b, 2);
            c = Math.Sqrt(c);
            return a * b * (int)c;
        }
    }
    public class Problem10 : Problems
    {
        /*The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.

        Find the sum of all the primes below two million.*/
        public override void Solve()
        {
            long primeTotal = 0;
            List<int> primes = PrimeList(2000000);
            foreach(int i in primes)
            {
                primeTotal += i;
            }
            Console.WriteLine("The total of the first two million primes is {0:###,###}", primeTotal);
        }

        public static List<int> PrimeList(int numberToRequest)
        {
            List<int> returnVal = new List<int>();
            returnVal.Add(2); returnVal.Add(3);

            List<bool> sieveList = new List<bool>();
            for(int i = 0; i < numberToRequest; i++)
            {
                sieveList.Add(false);
            }
            double square = Math.Sqrt(numberToRequest);

            for(int i = 1; i <= square; i++)
            {
                for (int j = 1; j <= square; j++)
                {
                    int n = 4 * i * i + j * j;
                    if (n < numberToRequest && (n % 12 == 1 || n % 12 == 5))
                        sieveList[n] ^= true;
                    n = 3 * i * i + j * j;
                    if (n < numberToRequest && (n % 12 == 7))
                        sieveList[n] ^= true;
                    n = 3 * i * i - j * j;
                    if (i > j && n < numberToRequest && (n % 12 == 11))
                        sieveList[n] ^= true;
                }
            }

            for(int i = 5; i <= square; i++)
            {
                if (Problem3.IsPrime(i))
                {
                    int squared = i * i;
                    for (int j = squared; j < numberToRequest; j += squared)
                        sieveList[j] = false;
                }
            }

            for(int i = 5; i < sieveList.Count; i+=2)
            {
                if (sieveList[i])
                    returnVal.Add(i);
            }

            return returnVal;
        }
    }
    /*In the 20×20 grid below, four numbers along a diagonal line have been marked in red.

    08 02 22 97 38 15 00 40  00  75  04  05  07 78 52 12 50 77 91 08
    49 49 99 40 17 81 18 57  60  87  17  40  98 43 69 48 04 56 62 00
    81 49 31 73 55 79 14 29  93  71  40  67  53 88 30 03 49 13 36 65
    52 70 95 23 04 60 11 42  69  24  68  56  01 32 56 71 37 02 36 91
    22 31 16 71 51 67 63 89  41  92  36  54  22 40 40 28 66 33 13 80
    24 47 32 60 99 03 45 02  44  75  33  53  78 36 84 20 35 17 12 50
    32 98 81 28 64 23 67 10 |26| 38  40  67  59 54 70 66 18 38 64 70
    67 26 20 68 02 62 12 20  95 |63| 94  39  63 08 40 91 66 49 94 21
    24 55 58 05 66 73 99 26  97  17 |78| 78  96 83 14 88 34 89 63 72
    21 36 23 09 75 00 76 44  20  45  35 |14| 00 61 33 97 34 31 33 95
    78 17 53 28 22 75 31 67  15  94  03  80  04 62 16 14 09 53 56 92
    16 39 05 42 96 35 31 47  55  58  88  24  00 17 54 24 36 29 85 57
    86 56 00 48 35 71 89 07  05  44  44  37  44 60 21 58 51 54 17 58
    19 80 81 68 05 94 47 69  28  73  92  13  86 52 17 77 04 89 55 40
    04 52 08 83 97 35 99 16  07  97  57  32  16 26 26 79 33 27 98 66
    88 36 68 87 57 62 20 72  03  46  33  67  46 55 12 32 63 93 53 69
    04 42 16 73 38 25 39 11  24  94  72  18  08 46 29 32 40 62 76 36
    20 69 36 41 72 30 23 88  34  62  99  69  82 67 59 85 74 04 36 16
    20 73 35 29 78 31 90 01  74  31  49  71  48 86 81 16 23 57 05 54
    01 70 54 71 83 51 54 69  16  92  33  48  61 43 52 01 89 19 67 48

    The product of these numbers is 26 × 63 × 78 × 14 = 1788696.

    What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?*/

    public class Problem11 : Problems
    {
        private ulong[,] grid;
        public override void Solve()
        {
            grid = new ulong[,]{
                { 08, 02, 22, 97, 38, 15, 00, 40, 00, 75, 04, 05, 07, 78, 52, 12, 50, 77, 91, 08},
                { 49, 49, 99, 40, 17, 81, 18, 57, 60, 87, 17, 40, 98, 43, 69, 48, 04, 56, 62, 00},
                { 81, 49, 31, 73, 55, 79, 14, 29, 93, 71, 40, 67, 53, 88, 30, 03, 49, 13, 36, 65},
                { 52, 70, 95, 23, 04, 60, 11, 42, 69, 24, 68, 56, 01, 32, 56, 71, 37, 02, 36, 91},
                { 22, 31, 16, 71, 51, 67, 63, 89, 41, 92, 36, 54, 22, 40, 40, 28, 66, 33, 13, 80},
                { 24, 47, 32, 60, 99, 03, 45, 02, 44, 75, 33, 53, 78, 36, 84, 20, 35, 17, 12, 50},
                { 32, 98, 81, 28, 64, 23, 67, 10, 26, 38, 40, 67, 59, 54, 70, 66, 18, 38, 64, 70},
                { 67, 26, 20, 68, 02, 62, 12, 20, 95, 63, 94, 39, 63, 08, 40, 91, 66, 49, 94, 21},
                { 24, 55, 58, 05, 66, 73, 99, 26, 97, 17, 78, 78, 96, 83, 14, 88, 34, 89, 63, 72},
                { 21, 36, 23, 09, 75, 00, 76, 44, 20, 45, 35, 14, 00, 61, 33, 97, 34, 31, 33, 95},
                { 78, 17, 53, 28, 22, 75, 31, 67, 15, 94, 03, 80, 04, 62, 16, 14, 09, 53, 56, 92},
                { 16, 39, 05, 42, 96, 35, 31, 47, 55, 58, 88, 24, 00, 17, 54, 24, 36, 29, 85, 57},
                { 86, 56, 00, 48, 35, 71, 89, 07, 05, 44, 44, 37, 44, 60, 21, 58, 51, 54, 17, 58},
                { 19, 80, 81, 68, 05, 94, 47, 69, 28, 73, 92, 13, 86, 52, 17, 77, 04, 89, 55, 40},
                { 04, 52, 08, 83, 97, 35, 99, 16, 07, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98, 66},
                { 88, 36, 68, 87, 57, 62, 20, 72, 03, 46, 33, 67, 46, 55, 12, 32, 63, 93, 53, 69},
                { 04, 42, 16, 73, 38, 25, 39, 11, 24, 94, 72, 18, 08, 46, 29, 32, 40, 62, 76, 36},
                { 20, 69, 36, 41, 72, 30, 23, 88, 34, 62, 99, 69, 82, 67, 59, 85, 74, 04, 36, 16},
                { 20, 73, 35, 29, 78, 31, 90, 01, 74, 31, 49, 71, 48, 86, 81, 16, 23, 57, 05, 54},
                { 01, 70, 54, 71, 83, 51, 54, 69, 16, 92, 33, 48, 61, 43, 52, 01, 89, 19, 67, 48},
            };

            ulong maxVal = 0;
            ulong tempVal;
            for(int i = 0; i < 20; i++)
            {
                for(int j = 0; j < 20; j++)
                {
                    if (j < 17)
                    {
                        tempVal = 1;
                        for (int k = 0; k < 4; k++)
                        {
                            tempVal *= grid[i, j + k];
                        }
                        if (tempVal > maxVal)
                            maxVal = tempVal;
                    }
                    if(i < 17)
                    {
                        tempVal = 1;
                        for(int k = 0; k < 4; k++)
                        {
                            tempVal *= grid[i + k, j];
                        }
                        if (tempVal > maxVal)
                            maxVal = tempVal;
                    }
                    if(j < 17 && i < 17)
                    {
                        tempVal = 1;
                        for (int k = 0; k < 4; k++)
                        {
                            tempVal *= grid[i + k, j + k];
                        }
                        if (tempVal > maxVal)
                            maxVal = tempVal;
                    }
                    if (j > 3 && i < 17)
                    {
                        tempVal = 1;
                        for (int k = 0; k < 4; k++)
                        {
                            tempVal *= grid[i + k, j - k];
                        }
                        if (tempVal > maxVal)
                            maxVal = tempVal;
                    }
                }
            }

            Console.WriteLine("Max value in grid on rows, columns and diagonal is {0:###,###}", maxVal);
        }
    }

    public class Problem12 : Problems
    {
        /*The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

        1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

        Let us list the factors of the first seven triangle numbers:

         1: 1
         3: 1,3
         6: 1,2,3,6
        10: 1,2,5,10
        15: 1,3,5,15
        21: 1,3,7,21
        28: 1,2,4,7,14,28
        We can see that 28 is the first triangle number to have over five divisors.

        What is the value of the first triangle number to have over five hundred divisors?*/

        public override void Solve()
        {
            int numDiv = 0;
            int triC = 0;
            while(numDiv < 500)
            {
                triC++;
                numDiv = NumOfDivisors(TriangleNumber(triC));
            }
            Console.WriteLine("First triangle number with over 500 divisors is {0:###,###}", TriangleNumber(triC));
        }

        public static int TriangleNumber(int nthTerm)
        {
            return nthTerm * (nthTerm + 1) / 2;
        }

        public static int NumOfDivisors(int valIn)
        {
            List<int> Factors = Problem5.PrimeFactors(valIn);
            HashSet<int> Count = new HashSet<int>();
            int total = 1;
            foreach(var group in Factors.GroupBy(e => e))
            {
                total *= group.Count() + 1;
            }
            return total;
        }
    }

    public class Problem13 : Problems
    {
        private string[] vals;
        /*Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.

        37107287533902102798797998220837590246510135740250
        ...
        53503534226472524250874054075591789781264330331690 */
        public override void Solve()
        {
            vals = new string[]
            {
                "37107287533902102798797998220837590246510135740250",
                "46376937677490009712648124896970078050417018260538",
                "74324986199524741059474233309513058123726617309629",
                "91942213363574161572522430563301811072406154908250",
                "23067588207539346171171980310421047513778063246676",
                "89261670696623633820136378418383684178734361726757",
                "28112879812849979408065481931592621691275889832738",
                "44274228917432520321923589422876796487670272189318",
                "47451445736001306439091167216856844588711603153276",
                "70386486105843025439939619828917593665686757934951",
                "62176457141856560629502157223196586755079324193331",
                "64906352462741904929101432445813822663347944758178",
                "92575867718337217661963751590579239728245598838407",
                "58203565325359399008402633568948830189458628227828",
                "80181199384826282014278194139940567587151170094390",
                "35398664372827112653829987240784473053190104293586",
                "86515506006295864861532075273371959191420517255829",
                "71693888707715466499115593487603532921714970056938",
                "54370070576826684624621495650076471787294438377604",
                "53282654108756828443191190634694037855217779295145",
                "36123272525000296071075082563815656710885258350721",
                "45876576172410976447339110607218265236877223636045",
                "17423706905851860660448207621209813287860733969412",
                "81142660418086830619328460811191061556940512689692",
                "51934325451728388641918047049293215058642563049483",
                "62467221648435076201727918039944693004732956340691",
                "15732444386908125794514089057706229429197107928209",
                "55037687525678773091862540744969844508330393682126",
                "18336384825330154686196124348767681297534375946515",
                "80386287592878490201521685554828717201219257766954",
                "78182833757993103614740356856449095527097864797581",
                "16726320100436897842553539920931837441497806860984",
                "48403098129077791799088218795327364475675590848030",
                "87086987551392711854517078544161852424320693150332",
                "59959406895756536782107074926966537676326235447210",
                "69793950679652694742597709739166693763042633987085",
                "41052684708299085211399427365734116182760315001271",
                "65378607361501080857009149939512557028198746004375",
                "35829035317434717326932123578154982629742552737307",
                "94953759765105305946966067683156574377167401875275",
                "88902802571733229619176668713819931811048770190271",
                "25267680276078003013678680992525463401061632866526",
                "36270218540497705585629946580636237993140746255962",
                "24074486908231174977792365466257246923322810917141",
                "91430288197103288597806669760892938638285025333403",
                "34413065578016127815921815005561868836468420090470",
                "23053081172816430487623791969842487255036638784583",
                "11487696932154902810424020138335124462181441773470",
                "63783299490636259666498587618221225225512486764533",
                "67720186971698544312419572409913959008952310058822",
                "95548255300263520781532296796249481641953868218774",
                "76085327132285723110424803456124867697064507995236",
                "37774242535411291684276865538926205024910326572967",
                "23701913275725675285653248258265463092207058596522",
                "29798860272258331913126375147341994889534765745501",
                "18495701454879288984856827726077713721403798879715",
                "38298203783031473527721580348144513491373226651381",
                "34829543829199918180278916522431027392251122869539",
                "40957953066405232632538044100059654939159879593635",
                "29746152185502371307642255121183693803580388584903",
                "41698116222072977186158236678424689157993532961922",
                "62467957194401269043877107275048102390895523597457",
                "23189706772547915061505504953922979530901129967519",
                "86188088225875314529584099251203829009407770775672",
                "11306739708304724483816533873502340845647058077308",
                "82959174767140363198008187129011875491310547126581",
                "97623331044818386269515456334926366572897563400500",
                "42846280183517070527831839425882145521227251250327",
                "55121603546981200581762165212827652751691296897789",
                "32238195734329339946437501907836945765883352399886",
                "75506164965184775180738168837861091527357929701337",
                "62177842752192623401942399639168044983993173312731",
                "32924185707147349566916674687634660915035914677504",
                "99518671430235219628894890102423325116913619626622",
                "73267460800591547471830798392868535206946944540724",
                "76841822524674417161514036427982273348055556214818",
                "97142617910342598647204516893989422179826088076852",
                "87783646182799346313767754307809363333018982642090",
                "10848802521674670883215120185883543223812876952786",
                "71329612474782464538636993009049310363619763878039",
                "62184073572399794223406235393808339651327408011116",
                "66627891981488087797941876876144230030984490851411",
                "60661826293682836764744779239180335110989069790714",
                "85786944089552990653640447425576083659976645795096",
                "66024396409905389607120198219976047599490197230297",
                "64913982680032973156037120041377903785566085089252",
                "16730939319872750275468906903707539413042652315011",
                "94809377245048795150954100921645863754710598436791",
                "78639167021187492431995700641917969777599028300699",
                "15368713711936614952811305876380278410754449733078",
                "40789923115535562561142322423255033685442488917353",
                "44889911501440648020369068063960672322193204149535",
                "41503128880339536053299340368006977710650566631954",
                "81234880673210146739058568557934581403627822703280",
                "82616570773948327592232845941706525094512325230608",
                "22918802058777319719839450180888072429661980811197",
                "77158542502016545090413245809786882778948721859617",
                "72107838435069186155435662884062257473692284509516",
                "20849603980134001723930671666823555245252804609722",
                "53503534226472524250874054075591789781264330331690"
            };
            int testTotal = 0;
            for (int i = vals[0].Length - 1; i > 10; i--)
            {
                foreach (string s in vals)
                {
                    testTotal += int.Parse(s.Substring(i, 1));
                }
                testTotal /= 10;
            }
            long finalTotal = testTotal;
            foreach (string s in vals)
            {
                finalTotal += long.Parse(s.Substring(0, 10));
            }
            Console.WriteLine("First ten digits of total is {0:###,###}", long.Parse(finalTotal.ToString().Substring(0, 10)));
        }
    }

    public class Problem14: Problems
    {
        /*The following iterative sequence is defined for the set of positive integers:

        n → n/2 (n is even)
        n → 3n + 1 (n is odd)

        Using the rule above and starting with 13, we generate the following sequence:

        13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
        It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.

        Which starting number, under one million, produces the longest chain?

        NOTE: Once the chain starts the terms are allowed to go above one million.*/
        public override void Solve()
        {
            int[] FoundLength = new int[1000000];
            long testValue;
            int lengthCount;
            int longestLength = 0;
            int longestLengthValue = 0;

            for (int i = 113383; i < 1000000; i++)
            {
                testValue = i;
                lengthCount = 0;
                while(testValue != 1)
                {
                    if (testValue % 2 == 0)
                        testValue /= 2;
                    else
                        testValue = (testValue * 3) + 1;
                    lengthCount++;
                    if (testValue < i)
                    {
                        lengthCount += FoundLength[testValue];
                        testValue = 1;
                    }
                }
                FoundLength[i] = lengthCount;
                if (lengthCount > longestLength)
                {
                    longestLength = lengthCount;
                    longestLengthValue = i;
                }
            }

            Console.WriteLine("Longest length Collatz problem below 1,000,000 is {0:###,###}",longestLengthValue);
        }
    }

    public class Problem15: Problems
    {
        /*Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.


        How many such routes are there through a 20×20 grid?*/
        public override void Solve()
        {
            int gridSize = 20;
            long[,] gridVals = new long[gridSize + 1, gridSize + 1];
            gridVals[0, 0] = 1;

            for(int i = 1; i < gridSize + 1; i++)
            {
                for(int j = 0; j <= i; j++)
                {
                    if (j == 0)
                        gridVals[i, j] = 1;
                    if (j > 0 && j < i)
                        gridVals[i, j] = gridVals[i, j - 1] + gridVals[i - 1, j];
                    if (i == j)
                        gridVals[i, j] = 2 * (gridVals[i, j - 1]);
                }
            }

            Console.WriteLine("Maximum number of routes through a 20 by 20 grid is {0:###,###}",gridVals[gridSize,gridSize]);
        }
    }

    public class Problem16: Problems
    {
        /*2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.

        What is the sum of the digits of the number 2^1000?*/
        public override void Solve()
        {
            List<int> PowOfTwoToThousand = factorOfTwo(1000);
            int total = 0;
            foreach(int i in PowOfTwoToThousand)
            {
                total += i;
            }

            Console.WriteLine("Total of all digits in 2 to pow of 1000 is {0:###,###}", total);
        }

        public static List<int> factorOfTwo(int factorSize)
        {
            List<int> returnList = new List<int>();
            returnList.Add(2);
            int initSize = 0;
            bool AddOne = false;

            while(factorSize > 1)
            {
                initSize = returnList.Count;
                for (int i = 0; i < initSize; i++)
                {
                    returnList[i] *= 2;
                    if (AddOne)
                    {
                        returnList[i]++;
                        AddOne = false;
                    }
                    if (returnList[i] >= 10)
                    {
                        returnList[i] -= 10;
                        if (returnList.Count < i + 2)
                            returnList.Add(1);
                        else
                            AddOne = true;
                    }
                }
                factorSize--;
            }

            returnList.Reverse();
            return returnList;
        }
    }

    public class Problem17: Problems
    {
        /*If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.

        If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?


        NOTE: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. 
        The use of "and" when writing out numbers is in compliance with British usage.*/
        public override void Solve()
        {
            int charCount = 0;
            for(int i = 1; i <= 1000; i++)
            {
                foreach(char c in intToString(i))
                {
                    if (c != ' ')
                        charCount++;
                }
            }
            Console.WriteLine("Total letters from 1 to 1000 inclusive when written is {0:###,###}",charCount);
        }

        public string intToString(int valueIn)
        {
            string stringIn = valueIn.ToString();
            StringBuilder sb = new StringBuilder();

            if(stringIn.Length >= 4)
            {
                sb.Append(digitToString(int.Parse(stringIn.Substring(0,1))) + " thousand");
                if (stringIn[2] != '0' || stringIn[1] != '0' || stringIn[0] != '0')
                    sb.Append(" ");
            }
            if(stringIn.Length >= 3)
            {
                if (stringIn.Substring(stringIn.Length - 3, 1) != "0")
                {
                    sb.Append(digitToString(int.Parse(stringIn.Substring(stringIn.Length - 3, 1))) + " hundred");
                }
                if (stringIn[stringIn.Length - 1] != '0' || stringIn[stringIn.Length - 2] != '0')
                    sb.Append(" and ");
            }
            if (stringIn.Length >= 2)
            {
                sb.Append(doubledigitToString(int.Parse(stringIn.Substring(stringIn.Length - 2, 2))));
            }
            if (stringIn.Length == 1)
            {
                sb.Append(doubledigitToString(int.Parse(stringIn.Substring(0,1))));
            }
            return sb.ToString();
        }

        public string doubledigitToString(int valueIn)
        {
            StringBuilder sb = new StringBuilder();
            if (valueIn < 10 && valueIn >= 0)
                return digitToString(valueIn);
            if (valueIn < 20)
            {
                switch (valueIn)
                {
                    case 10: sb.Append("ten"); break;
                    case 11: sb.Append("eleven"); break;
                    case 12: sb.Append("twelve"); break;
                    case 13: sb.Append("thirteen"); break;
                    case 14: sb.Append("fourteen"); break;
                    case 15: sb.Append("fifteen"); break;
                    case 16: sb.Append("sixteen"); break;
                    case 17: sb.Append("seventeen"); break;
                    case 18: sb.Append("eighteen"); break;
                    case 19: sb.Append("nineteen"); break;
                }
            }
            else
            {
                int tens = valueIn / 10;
                string appendTens = "";
                switch (tens)
                {
                    case 0: break;
                    case 2: appendTens = "twenty"; break;
                    case 3: appendTens = "thirty"; break;
                    case 4: appendTens = "forty"; break;
                    case 5: appendTens = "fifty"; break;
                    case 8: appendTens = "eighty"; break;
                    default: appendTens = digitToString(tens) + "ty"; break;
                }
                sb.Append(appendTens);
                if (valueIn > tens * 10)
                    sb.Append(" " + digitToString(valueIn - (tens * 10)));
            }
            return sb.ToString();
        }

        public string digitToString(int valueIn)
        {
            switch (valueIn)
            {
                case 1: return "one";
                case 2: return "two";
                case 3: return "three";
                case 4: return "four";
                case 5: return "five";
                case 6: return "six"; 
                case 7: return "seven";
                case 8: return "eight";
                case 9: return "nine";
                default: return String.Empty;
            }
        }
    }

    public class Problem18: Problems
    {
        /*By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.

           3
          7 4
         2 4 6
        8 5 9 3

        That is, 3 + 7 + 4 + 9 = 23.

        Find the maximum total from top to bottom of the triangle below:

                      75
                     95 64
                    17 47 82
                   18 35 87 10
                  20 04 82 47 65
                 19 01 23 75 03 34
                88 02 77 73 07 63 67
               99 65 04 28 06 16 70 92
              41 41 26 56 83 40 80 70 33
             41 48 72 33 47 32 37 16 94 29
            53 71 44 65 25 43 91 52 97 51 14
           70 11 33 28 77 73 17 78 39 68 17 57
          91 71 52 38 17 14 91 43 58 50 27 29 48
         63 66 04 68 89 53 67 30 73 16 69 87 40 31
        04 62 98 27 23 09 70 98 73 93 38 53 60 04 23

        NOTE: As there are only 16384 routes, it is possible to solve this problem by trying every route. 
        However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)*/
        public override void Solve()
        {
            List<int[]> TriangleNumber = new List<int[]>();
            TriangleNumber.Add(new int[] { 75 });
            TriangleNumber.Add(new int[] { 95, 64 });
            TriangleNumber.Add(new int[] { 17, 47, 82 });
            TriangleNumber.Add(new int[] { 18, 35, 87, 10 });
            TriangleNumber.Add(new int[] { 20, 4, 82, 47, 65 });
            TriangleNumber.Add(new int[] { 19, 1, 23, 75, 3, 34 });
            TriangleNumber.Add(new int[] { 88, 2, 77, 73, 7, 63, 67 });
            TriangleNumber.Add(new int[] { 99, 65, 4, 28, 6, 16, 70, 92 });
            TriangleNumber.Add(new int[] { 41, 41, 26, 56, 83, 40, 80, 70, 33 });
            TriangleNumber.Add(new int[] { 41, 48, 72, 33, 47, 32, 37, 16, 94, 29 });
            TriangleNumber.Add(new int[] { 53, 71, 44, 65, 25, 43, 91, 52, 97, 51, 14 });
            TriangleNumber.Add(new int[] { 70, 11, 33, 28, 77, 73, 17, 78, 39, 68, 17, 57 });
            TriangleNumber.Add(new int[] { 91, 71, 52, 38, 17, 14, 91, 43, 58, 50, 27, 29, 48 });
            TriangleNumber.Add(new int[] { 63, 66, 4, 68, 89, 53, 67, 30, 73, 16, 69, 87, 40, 31 });
            TriangleNumber.Add(new int[] { 4, 62, 98, 27, 23, 9, 70, 98, 73, 93, 38, 53, 60, 4, 23 });

            TriValue[][] TriValues = new TriValue[TriangleNumber.Count][];
            for(int i = 0; i < TriangleNumber.Count; i++)
            {
                TriValues[i] = new TriValue[TriangleNumber[i].Length];
                if(i == 0)
                {
                    TriValues[i][0] = new TriValue(TriangleNumber[i][0], 0);
                }
                else
                {
                    for(int j = 0; j < TriValues[i].Length; j++)
                    {
                        if(j == 0)
                            TriValues[i][j] = new TriValue(TriValues[i - 1][0].maxValue + TriangleNumber[i][j], 0);
                        if(j > 0 && j < TriValues[i].Length - 1)
                        {
                            TriValues[i][j] = new TriValue(TriValues[i - 1][j - 1].maxValue + TriangleNumber[i][j], 1);
                            TriValues[i][j].IsBigger(TriValues[i - 1][j].maxValue + TriangleNumber[i][j], 0);
                        }
                        if(j == TriValues[i].Length - 1)
                        {
                            TriValues[i][j] = new TriValue(TriValues[i - 1][j - 1].maxValue + TriangleNumber[i][j], 1);
                        }
                        
                    }
                }
            }
            int maxVal = 0;
            foreach(TriValue tVal in TriValues[TriangleNumber.Count - 1])
            {
                if (tVal.maxValue > maxVal)
                    maxVal = tVal.maxValue;
            }
            Console.WriteLine("The maximum value at the bottom of the pyramid is {0:###,###}",maxVal);
        }
    }

    public class TriValue
    {
        public int maxValue = 0;
        public int parent = 0;

        public TriValue(int maxValueIn, int parentIn)
        {
            maxValue = maxValueIn;
            parent = parentIn;
        }
        public void IsBigger(int valCompare, int parentIn)
        {
            if(valCompare > maxValue)
            {
                maxValue = valCompare;
                parent = parentIn;
            }
        }
    }

    public class Problem19: Problems
    {
        /*You are given the following information, but you may prefer to do some research for yourself.

        1 Jan 1900 was a Monday.
        Thirty days has September,
        April, June and November.
        All the rest have thirty-one,
        Saving February alone,
        Which has twenty-eight, rain or shine.
        And on leap years, twenty-nine.
        A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
        How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?*/
        public override void Solve()
        {
            int SundayCount = 0;
            DateTime DateChecker = new DateTime(1901, 1, 1);
            while(DateChecker.Year < 2001)
            {
                if (DateChecker.DayOfWeek == DayOfWeek.Sunday)
                    SundayCount++;
                DateChecker = DateChecker.AddMonths(1);
            }
            Console.WriteLine("Number of Sundays on first day of month in twentieth century is {0:###,###}",SundayCount);
        }
    }

    public class Problem20: Problems
    {
        /*n! means n × (n − 1) × ... × 3 × 2 × 1

        For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
        and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.

        Find the sum of the digits in the number 100!*/
        public override void Solve()
        {
            string FactorValue = Factorial(100);
            int sumOfChars = 0;

            foreach(char c in FactorValue) {
                sumOfChars += int.Parse(c.ToString());
            }
            Console.WriteLine("Sum of chars for 100! is {0:###,###}",sumOfChars);
        }

        public static string Factorial(int FactorialSize)
        {
            System.Numerics.BigInteger bInt = new System.Numerics.BigInteger();
            bInt = 1;
            while(FactorialSize > 1) {
                bInt *= FactorialSize;
                FactorialSize--;
            }

            return bInt.ToString();
        }
    }

    public class Problem21: Problems
    {
        /*Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
        If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.

        For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.

        Evaluate the sum of all the amicable numbers under 10000.*/
        public override void Solve()
        {
            Dictionary<int, int> divisorVals = new Dictionary<int, int>();

            for(int i = 1; i < 10000; i++)
            {
                divisorVals.Add(i, SumOfProperDivisors(i));
            }

            int sumTotal = 0;
            foreach(int i in divisorVals.Keys)
            {
                if (divisorVals[i] < 10000)
                {
                    if (i == divisorVals[divisorVals[i]] && i != divisorVals[i])
                    {
                        sumTotal += divisorVals[i];
                    }
                }
            }

            Console.WriteLine("Total of all amicable numbers below 10000 is {0:###,###}",sumTotal);
        }

        public int SumOfProperDivisors(int valIn)
        {
            if (Problem3.IsPrime(valIn))
                return 1;
            List<int> valsFound = new List<int>();
            valsFound.Add(1);
            if (valIn == 4)
                return 3;
            int minVal = 0;

            for (int i = valIn / 2; i > 1; i--)
            {
                if(minVal >= i)
                {
                    i = 0;
                    continue;
                }
                if (valIn % i == 0)
                {
                    valsFound.Add(i);
                    valsFound.Add(valIn / i);
                    minVal = valIn / i;
                }
            }

            int total = 0;

            foreach(int i in valsFound)
            {
                total += i;
            }
            return total;
        }
    }

    public class Problem22: Problems
    {
        /*Using names.txt (right click and 'Save Link/Target As...'), a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. 
         * Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.

        For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. 
        So, COLIN would obtain a score of 938 × 53 = 49714.

        What is the total of all the name scores in the file?*/
        public override void Solve()
        {
            List<string> names = new List<string>();
            FileStream fs = new FileStream("p022_names.txt", FileMode.Open);
            using (StreamReader sr = new StreamReader(fs,Encoding.UTF8))
            {
                string tempStr = sr.ReadToEnd();
                string[] tempNames = tempStr.Split(',');
                foreach(string s in tempNames)
                {
                    names.Add(s.Replace("\"",""));
                }
            }
            names.Sort();
            System.Numerics.BigInteger bigCount = new System.Numerics.BigInteger();
            int entryVal = 1;
            foreach(string s in names)
            {
                bigCount += NameValue(s, entryVal);
                entryVal++;
            }

            Console.WriteLine("Total letter/position value of names in p022names text file is {0:###,###}",bigCount.ToString());
        }

        public int NameValue(string nameIn, int namePosition)
        {
            int totalReturn = 0;
            foreach(char c in nameIn)
            {
                totalReturn += Encoding.ASCII.GetBytes(c.ToString())[0] - 64;
            }
            return totalReturn * namePosition;
        }
    }
    class Program
    {
        static void Main(string[] args)
        {
            List<Problems> ProblemsList = new List<Problems>();
            ProblemsList.Add(new Problem1());
            ProblemsList.Add(new Problem2());
            ProblemsList.Add(new Problem3());
            ProblemsList.Add(new Problem4());
            ProblemsList.Add(new Problem5());
            ProblemsList.Add(new Problem6());
            ProblemsList.Add(new Problem7());
            ProblemsList.Add(new Problem8());
            ProblemsList.Add(new Problem9());
            ProblemsList.Add(new Problem10());
            ProblemsList.Add(new Problem11());
            ProblemsList.Add(new Problem12());
            ProblemsList.Add(new Problem13());
            ProblemsList.Add(new Problem14());
            ProblemsList.Add(new Problem15());
            ProblemsList.Add(new Problem16());
            ProblemsList.Add(new Problem17());
            ProblemsList.Add(new Problem18());
            ProblemsList.Add(new Problem19());
            ProblemsList.Add(new Problem20());
            ProblemsList.Add(new Problem21());
            ProblemsList.Add(new Problem22());
            int ProblemCount = 1;
            foreach(Problems p in ProblemsList)
            {
                Console.Write(ProblemCount + ": ");
                p.Solve();
                Console.WriteLine();
                ProblemCount++;
            }
            Console.ReadKey();
        }
    }
}
